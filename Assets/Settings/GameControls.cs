//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""FpsInput"",
            ""id"": ""731f6613-8b1e-429e-885d-f6abdabb8a86"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ccaa898a-ad1d-49f8-9087-f8361b491656"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""18a68192-627e-41a8-8057-a97f56a983e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""c0227a44-4707-4182-a67a-af97d618ce53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""14094f35-e9b0-4bf4-a482-1c52fada47fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""1ccc2122-82ec-4fe7-85c9-7e920108cc71"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3b738d97-4a44-4d17-9bb0-0ddbfb8d98d1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""60d1c483-a22f-4a10-ab3e-614df256217d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7ad7042c-6306-43b6-9db9-55c6b7244245"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""841081e1-dbcf-4ed7-be5a-6a4d1fcacd3d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b41a1c83-5433-4985-b7e4-0aa0c409d856"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e8d38a9-9ec7-4482-a97c-c8169c911fd8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfa5b6a6-3226-448d-8622-b0c3512fec84"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FpsInput
        m_FpsInput = asset.FindActionMap("FpsInput", throwIfNotFound: true);
        m_FpsInput_Movement = m_FpsInput.FindAction("Movement", throwIfNotFound: true);
        m_FpsInput_PointerPosition = m_FpsInput.FindAction("PointerPosition", throwIfNotFound: true);
        m_FpsInput_Shoot = m_FpsInput.FindAction("Shoot", throwIfNotFound: true);
        m_FpsInput_Reload = m_FpsInput.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FpsInput
    private readonly InputActionMap m_FpsInput;
    private IFpsInputActions m_FpsInputActionsCallbackInterface;
    private readonly InputAction m_FpsInput_Movement;
    private readonly InputAction m_FpsInput_PointerPosition;
    private readonly InputAction m_FpsInput_Shoot;
    private readonly InputAction m_FpsInput_Reload;
    public struct FpsInputActions
    {
        private @GameControls m_Wrapper;
        public FpsInputActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_FpsInput_Movement;
        public InputAction @PointerPosition => m_Wrapper.m_FpsInput_PointerPosition;
        public InputAction @Shoot => m_Wrapper.m_FpsInput_Shoot;
        public InputAction @Reload => m_Wrapper.m_FpsInput_Reload;
        public InputActionMap Get() { return m_Wrapper.m_FpsInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FpsInputActions set) { return set.Get(); }
        public void SetCallbacks(IFpsInputActions instance)
        {
            if (m_Wrapper.m_FpsInputActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnMovement;
                @PointerPosition.started -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.performed -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.canceled -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnPointerPosition;
                @Shoot.started -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnShoot;
                @Reload.started -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_FpsInputActionsCallbackInterface.OnReload;
            }
            m_Wrapper.m_FpsInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
            }
        }
    }
    public FpsInputActions @FpsInput => new FpsInputActions(this);
    public interface IFpsInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
